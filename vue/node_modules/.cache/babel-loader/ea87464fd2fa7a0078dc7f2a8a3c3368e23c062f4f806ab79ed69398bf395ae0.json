{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/**\r\n * WebViewInterface class to handle communication between webView and Android/iOS.\r\n */\nvar NSWebViewinterface = function () {\n  function NSWebViewinterface() {\n    /**\r\n     * Mapping of native eventName and its handler in webView\r\n     */\n    this.eventListenerMap = {};\n    /**\r\n     * Mapping of JS Call responseId and result for iOS\r\n     */\n    this._iosResponseMap = {};\n\n    /**\r\n     * Counter of iOS JS Call responseId\r\n     */\n    this._iosCntResponseId = 0;\n  }\n\n  /**\r\n   * Handles events/commands emitted by android/ios. This function is called from nativescript.\r\n   * @param   {string}    eventName - Native event/command name\r\n   * @param   {data}      data - Payload for the event/command\r\n   */\n  NSWebViewinterface.prototype._onNativeEvent = function (eventName, data) {\n    var lstEvtListeners = this.eventListenerMap[eventName] || [];\n    for (var _i = 0; _i < lstEvtListeners.length; _i++) {\n      var listener = lstEvtListeners[_i];\n      var retnVal = listener && listener(data);\n      // if any handler return false, not executing any further handlers for that event.\n      if (retnVal === false) {\n        break;\n      }\n    }\n  };\n\n  /**\r\n   * Handles JS function calls by android/ios. This function is called from nativescript.\r\n   * Result value of JS function call can be promise or any other data.\r\n   * @param   {number}    reqId - Internal communication id\r\n   * @param   {string}    functionName - Function to be executed in webView\r\n   * @param   {any[]}     args\r\n   */\n  NSWebViewinterface.prototype._callJSFunction = function (reqId, functionName, args) {\n    var _this = this;\n    var resolvedFn = _this._getResolvedFunction(functionName);\n    if (resolvedFn) {\n      var retnVal = resolvedFn.apply(window, args);\n      if (retnVal && retnVal.then) {\n        retnVal.then(function (value) {\n          _this._sendJSCallResponse(reqId, value);\n        }, function (error) {\n          _this._sendJSCallResponse(reqId, error, true);\n        });\n      } else {\n        this._sendJSCallResponse(reqId, retnVal);\n      }\n    }\n  };\n\n  /**\r\n   * Resolves a function, if the function to be executed is in deep object chain.\r\n   * e.g If we want to execute a function 'parent.child.child.fn' from native app,\r\n   * this function will extract fn from the object chain.\r\n   * We can do it by using eval also, but as there is a way, why to invite unknown security risks?\r\n   *\r\n   */\n  NSWebViewinterface.prototype._getResolvedFunction = function (functionName) {\n    if (functionName && (functionName = functionName.trim()).length) {\n      functionName = functionName.indexOf(\"window.\") === 0 ? functionName.replace(\"window.\", \"\") : functionName;\n      var arrFnPath = functionName.split(\".\");\n      var fn = window;\n      for (var i = 0; i < arrFnPath.length; i++) {\n        if (!fn[arrFnPath[i]]) {\n          fn = null;\n          break;\n        }\n        fn = fn[arrFnPath[i]];\n      }\n      return fn;\n    }\n  };\n\n  /**\r\n   * Returns JS Call response by emitting internal _jsCallRespone event\r\n   */\n  NSWebViewinterface.prototype._sendJSCallResponse = function (reqId, response, isError) {\n    var oResponse = {\n      reqId: reqId,\n      response: response || null,\n      isError: !!isError\n    };\n    this.emit(\"_jsCallResponse\", oResponse);\n  };\n\n  /**\r\n   * Creates temporary iFrame element to load custom url, for sending handshake message\r\n   * to iOS which is necessary to initiate data transfer from webView to iOS\r\n   */\n  NSWebViewinterface.prototype._createIFrame = function (src) {\n    var rootElm = document.documentElement;\n    var newFrameElm = document.createElement(\"IFRAME\");\n    newFrameElm.setAttribute(\"src\", src);\n    rootElm.appendChild(newFrameElm);\n    return newFrameElm;\n  };\n\n  /**\r\n   * Sends handshaking signal to iOS using custom url, for sending event payload or JS Call response.\r\n   * As iOS do not allow to send any data from webView. Here we are sending data in two steps.\r\n   * 1. Send handshake signal, by loading custom url in iFrame with metadata (eventName, unique responseId)\r\n   * 2. On intercept of this request, iOS calls _getIOSResponse with the responseId to fetch the data.\r\n   */\n  NSWebViewinterface.prototype._emitEventToIOS = function (eventName, data) {\n    this._iosResponseMap[++this._iosCntResponseId] = data;\n    var metadata = {\n      eventName: eventName,\n      resId: this._iosCntResponseId\n    };\n    var url = \"js2ios:\" + JSON.stringify(metadata);\n    var iFrame = this._createIFrame(url);\n    iFrame.parentNode.removeChild(iFrame);\n  };\n\n  /**\r\n   * Returns data to iOS. This function is called from iOS.\r\n   */\n  NSWebViewinterface.prototype._getIOSResponse = function (resId) {\n    var response = this._iosResponseMap[resId];\n    delete this._iosResponseMap[resId];\n    return response;\n  };\n\n  /**\r\n   * Calls native android function to emit event and payload to android\r\n   */\n  NSWebViewinterface.prototype._emitEventToAndroid = function (eventName, data) {\n    window.androidWebViewInterface.handleEventFromWebView(eventName, data);\n  };\n\n  /**\r\n   * Registers handlers for android/ios event/command\r\n   */\n  NSWebViewinterface.prototype.on = function (eventName, callback) {\n    var lstListeners = this.eventListenerMap[eventName] || (this.eventListenerMap[eventName] = []);\n    lstListeners.push(callback);\n  };\n\n  /**\r\n  * Removes handler for android/ios event/command. If handler is not provided, all handlers for provided\r\n    event will be removed\r\n  */\n  NSWebViewinterface.prototype.off = function (eventName, callback) {\n    if (this.eventListenerMap[eventName] || this.eventListenerMap[eventName].length === 0) {\n      return;\n    }\n    if (callback) {\n      this.eventListenerMap[eventName] = this.eventListenerMap[eventName].filter(function (oldCallback) {\n        return oldCallback !== callback;\n      });\n    } else {\n      delete this.eventListenerMap[eventName];\n    }\n  };\n\n  /**\r\n   * Emits event to android/ios\r\n   */\n  NSWebViewinterface.prototype.emit = function (eventName, data) {\n    var strData = typeof data === \"object\" ? JSON.stringify(data) : data;\n    if (window.androidWebViewInterface) {\n      this._emitEventToAndroid(eventName, strData);\n    } else {\n      this._emitEventToIOS(eventName, strData);\n    }\n  };\n  return NSWebViewinterface;\n}();\nwindow.nsWebViewInterface = new NSWebViewinterface();","map":{"version":3,"names":["NSWebViewinterface","eventListenerMap","_iosResponseMap","_iosCntResponseId","prototype","_onNativeEvent","eventName","data","lstEvtListeners","_i","length","listener","retnVal","_callJSFunction","reqId","functionName","args","_this","resolvedFn","_getResolvedFunction","apply","window","then","value","_sendJSCallResponse","error","trim","indexOf","replace","arrFnPath","split","fn","i","response","isError","oResponse","emit","_createIFrame","src","rootElm","document","documentElement","newFrameElm","createElement","setAttribute","appendChild","_emitEventToIOS","metadata","resId","url","JSON","stringify","iFrame","parentNode","removeChild","_getIOSResponse","_emitEventToAndroid","androidWebViewInterface","handleEventFromWebView","on","callback","lstListeners","push","off","filter","oldCallback","strData","nsWebViewInterface"],"sources":["D:/github-deadbeat/wmn-calendar.itserve.es/src/plugins/nativescript-webview-interface.js"],"sourcesContent":["/**\r\n * WebViewInterface class to handle communication between webView and Android/iOS.\r\n */\r\nvar NSWebViewinterface = (function () {\r\n  function NSWebViewinterface() {\r\n    /**\r\n     * Mapping of native eventName and its handler in webView\r\n     */\r\n    this.eventListenerMap = {};\r\n    /**\r\n     * Mapping of JS Call responseId and result for iOS\r\n     */\r\n    this._iosResponseMap = {};\r\n\r\n    /**\r\n     * Counter of iOS JS Call responseId\r\n     */\r\n    this._iosCntResponseId = 0;\r\n  }\r\n\r\n  /**\r\n   * Handles events/commands emitted by android/ios. This function is called from nativescript.\r\n   * @param   {string}    eventName - Native event/command name\r\n   * @param   {data}      data - Payload for the event/command\r\n   */\r\n  NSWebViewinterface.prototype._onNativeEvent = function (eventName, data) {\r\n    var lstEvtListeners = this.eventListenerMap[eventName] || [];\r\n    for (var _i = 0; _i < lstEvtListeners.length; _i++) {\r\n      var listener = lstEvtListeners[_i];\r\n      var retnVal = listener && listener(data);\r\n      // if any handler return false, not executing any further handlers for that event.\r\n      if (retnVal === false) {\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles JS function calls by android/ios. This function is called from nativescript.\r\n   * Result value of JS function call can be promise or any other data.\r\n   * @param   {number}    reqId - Internal communication id\r\n   * @param   {string}    functionName - Function to be executed in webView\r\n   * @param   {any[]}     args\r\n   */\r\n  NSWebViewinterface.prototype._callJSFunction = function (\r\n    reqId,\r\n    functionName,\r\n    args\r\n  ) {\r\n    var _this = this;\r\n    var resolvedFn = _this._getResolvedFunction(functionName);\r\n    if (resolvedFn) {\r\n      var retnVal = resolvedFn.apply(window, args);\r\n      if (retnVal && retnVal.then) {\r\n        retnVal.then(\r\n          function (value) {\r\n            _this._sendJSCallResponse(reqId, value);\r\n          },\r\n          function (error) {\r\n            _this._sendJSCallResponse(reqId, error, true);\r\n          }\r\n        );\r\n      } else {\r\n        this._sendJSCallResponse(reqId, retnVal);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Resolves a function, if the function to be executed is in deep object chain.\r\n   * e.g If we want to execute a function 'parent.child.child.fn' from native app,\r\n   * this function will extract fn from the object chain.\r\n   * We can do it by using eval also, but as there is a way, why to invite unknown security risks?\r\n   *\r\n   */\r\n  NSWebViewinterface.prototype._getResolvedFunction = function (functionName) {\r\n    if (functionName && (functionName = functionName.trim()).length) {\r\n      functionName =\r\n        functionName.indexOf(\"window.\") === 0\r\n          ? functionName.replace(\"window.\", \"\")\r\n          : functionName;\r\n      var arrFnPath = functionName.split(\".\");\r\n      var fn = window;\r\n      for (var i = 0; i < arrFnPath.length; i++) {\r\n        if (!fn[arrFnPath[i]]) {\r\n          fn = null;\r\n          break;\r\n        }\r\n        fn = fn[arrFnPath[i]];\r\n      }\r\n      return fn;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns JS Call response by emitting internal _jsCallRespone event\r\n   */\r\n  NSWebViewinterface.prototype._sendJSCallResponse = function (\r\n    reqId,\r\n    response,\r\n    isError\r\n  ) {\r\n    var oResponse = {\r\n      reqId: reqId,\r\n      response: response || null,\r\n      isError: !!isError,\r\n    };\r\n    this.emit(\"_jsCallResponse\", oResponse);\r\n  };\r\n\r\n  /**\r\n   * Creates temporary iFrame element to load custom url, for sending handshake message\r\n   * to iOS which is necessary to initiate data transfer from webView to iOS\r\n   */\r\n  NSWebViewinterface.prototype._createIFrame = function (src) {\r\n    var rootElm = document.documentElement;\r\n    var newFrameElm = document.createElement(\"IFRAME\");\r\n    newFrameElm.setAttribute(\"src\", src);\r\n    rootElm.appendChild(newFrameElm);\r\n    return newFrameElm;\r\n  };\r\n\r\n  /**\r\n   * Sends handshaking signal to iOS using custom url, for sending event payload or JS Call response.\r\n   * As iOS do not allow to send any data from webView. Here we are sending data in two steps.\r\n   * 1. Send handshake signal, by loading custom url in iFrame with metadata (eventName, unique responseId)\r\n   * 2. On intercept of this request, iOS calls _getIOSResponse with the responseId to fetch the data.\r\n   */\r\n  NSWebViewinterface.prototype._emitEventToIOS = function (eventName, data) {\r\n    this._iosResponseMap[++this._iosCntResponseId] = data;\r\n    var metadata = { eventName: eventName, resId: this._iosCntResponseId };\r\n    var url = \"js2ios:\" + JSON.stringify(metadata);\r\n    var iFrame = this._createIFrame(url);\r\n    iFrame.parentNode.removeChild(iFrame);\r\n  };\r\n\r\n  /**\r\n   * Returns data to iOS. This function is called from iOS.\r\n   */\r\n  NSWebViewinterface.prototype._getIOSResponse = function (resId) {\r\n    var response = this._iosResponseMap[resId];\r\n    delete this._iosResponseMap[resId];\r\n    return response;\r\n  };\r\n\r\n  /**\r\n   * Calls native android function to emit event and payload to android\r\n   */\r\n  NSWebViewinterface.prototype._emitEventToAndroid = function (\r\n    eventName,\r\n    data\r\n  ) {\r\n    window.androidWebViewInterface.handleEventFromWebView(eventName, data);\r\n  };\r\n\r\n  /**\r\n   * Registers handlers for android/ios event/command\r\n   */\r\n  NSWebViewinterface.prototype.on = function (eventName, callback) {\r\n    var lstListeners =\r\n      this.eventListenerMap[eventName] ||\r\n      (this.eventListenerMap[eventName] = []);\r\n    lstListeners.push(callback);\r\n  };\r\n\r\n  /**\r\n  * Removes handler for android/ios event/command. If handler is not provided, all handlers for provided\r\n    event will be removed\r\n  */\r\n  NSWebViewinterface.prototype.off = function (eventName, callback) {\r\n    if (\r\n      this.eventListenerMap[eventName] ||\r\n      this.eventListenerMap[eventName].length === 0\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (callback) {\r\n      this.eventListenerMap[eventName] = this.eventListenerMap[\r\n        eventName\r\n      ].filter(function (oldCallback) {\r\n        return oldCallback !== callback;\r\n      });\r\n    } else {\r\n      delete this.eventListenerMap[eventName];\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Emits event to android/ios\r\n   */\r\n  NSWebViewinterface.prototype.emit = function (eventName, data) {\r\n    var strData = typeof data === \"object\" ? JSON.stringify(data) : data;\r\n    if (window.androidWebViewInterface) {\r\n      this._emitEventToAndroid(eventName, strData);\r\n    } else {\r\n      this._emitEventToIOS(eventName, strData);\r\n    }\r\n  };\r\n  return NSWebViewinterface;\r\n})();\r\nwindow.nsWebViewInterface = new NSWebViewinterface();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}