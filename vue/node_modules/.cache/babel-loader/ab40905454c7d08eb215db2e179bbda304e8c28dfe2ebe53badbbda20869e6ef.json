{"ast":null,"code":"/**\r\n *  app-bridge small lib that wraps plugin to connect nativesript and vuejs into\r\n *  mixin. That mixin connected to app entrypoint (main.js) and methods of that mixin\r\n *  can be used everywhere inside vuejs app\r\n *  plugin to connect vuejs webview to nativescript and code samples here:\r\n *  https://www.npmjs.com/package/nativescript-webview-interface\r\n */\nimport '@/plugins/nativescript-webview-interface.js';\nvar oWebViewInterface = window.nsWebViewInterface;\nexport default {\n  methods: {\n    /**\r\n     *\r\n     * @param eventName - name of event what will be recived from nativescript\r\n     * @param callBackFn - function what will handle data recived from nativescript\r\n     */\n    nativeWaitForEvent(eventName, callBackFn) {\n      oWebViewInterface.on(eventName, callBackFn);\n    },\n    /**\r\n     *\r\n     * @param eventName - name of event what will be recived by nativescript\r\n     * @param eventData - data what should be sent to nativescript wrapoer\r\n     */\n    nativeSendEvent(eventName, eventData = {\n      empty: true\n    }) {\n      oWebViewInterface.emit(eventName, eventData);\n    }\n  }\n};","map":{"version":3,"names":["oWebViewInterface","window","nsWebViewInterface","methods","nativeWaitForEvent","eventName","callBackFn","on","nativeSendEvent","eventData","empty","emit"],"sources":["D:/github-deadbeat/wmn-calendar.itserve.es/src/mixins/app-bridge.js"],"sourcesContent":["/**\r\n *  app-bridge small lib that wraps plugin to connect nativesript and vuejs into\r\n *  mixin. That mixin connected to app entrypoint (main.js) and methods of that mixin\r\n *  can be used everywhere inside vuejs app\r\n *  plugin to connect vuejs webview to nativescript and code samples here:\r\n *  https://www.npmjs.com/package/nativescript-webview-interface\r\n */\r\nimport '@/plugins/nativescript-webview-interface.js';\r\nlet oWebViewInterface = window.nsWebViewInterface;\r\n\r\nexport default {\r\n\tmethods: {\r\n\t\t/**\r\n\t\t *\r\n\t\t * @param eventName - name of event what will be recived from nativescript\r\n\t\t * @param callBackFn - function what will handle data recived from nativescript\r\n\t\t */\r\n\t\tnativeWaitForEvent(eventName, callBackFn) {\r\n\t\t\toWebViewInterface.on(eventName, callBackFn);\r\n\t\t},\r\n\t\t/**\r\n\t\t *\r\n\t\t * @param eventName - name of event what will be recived by nativescript\r\n\t\t * @param eventData - data what should be sent to nativescript wrapoer\r\n\t\t */\r\n\t\tnativeSendEvent(eventName, eventData = { empty: true }) {\r\n\t\t\toWebViewInterface.emit(eventName, eventData);\r\n\t\t},\r\n\t},\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,6CAA6C;AACpD,IAAIA,iBAAiB,GAAGC,MAAM,CAACC,kBAAkB;AAEjD,eAAe;EACdC,OAAO,EAAE;IACR;AACF;AACA;AACA;AACA;IACEC,kBAAkBA,CAACC,SAAS,EAAEC,UAAU,EAAE;MACzCN,iBAAiB,CAACO,EAAE,CAACF,SAAS,EAAEC,UAAU,CAAC;IAC5C,CAAC;IACD;AACF;AACA;AACA;AACA;IACEE,eAAeA,CAACH,SAAS,EAAEI,SAAS,GAAG;MAAEC,KAAK,EAAE;IAAK,CAAC,EAAE;MACvDV,iBAAiB,CAACW,IAAI,CAACN,SAAS,EAAEI,SAAS,CAAC;IAC7C;EACD;AACD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}