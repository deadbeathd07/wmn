{"ast":null,"code":"import notifications from \"@/plugins/api/factories/Notifications\";\nexport var state = {\n  notifications: [],\n  unreadNotifications: 0\n};\nexport var mutations = {\n  SET_NOTIFICATIONS(state, notifications) {\n    state.notifications = notifications;\n  },\n  SET_UNREAD_NOTIFICATIONS(state, notifications) {\n    state.unreadNotifications = notifications;\n  }\n};\nexport var actions = {\n  async deleteNotification({\n    dispatch\n  }, notificationId) {\n    await notifications.deleteNotification(notificationId);\n    dispatch(\"deleteNotificationFromState\", notificationId);\n  },\n  async deleteNotificationFromState({\n    state,\n    commit\n  }, notificationId) {\n    var notifications = state.notifications;\n    state.notifications = [];\n    for (var i in notifications) {\n      if (notifications[i].id === notificationId) {\n        delete notifications[i];\n        await commit(\"SET_NOTIFICATIONS\", notifications.filter(function (item) {\n          return item !== undefined;\n        }));\n        console.log(state.notifications);\n      }\n    }\n  },\n  async markAsRead({\n    commit\n  }, notificationIds) {\n    return notifications.setReadNotifications(notificationIds, () => {\n      commit(\"SET_UNREAD_NOTIFICATIONS\", 0);\n    });\n  },\n  async getNotifications({\n    commit\n  }) {\n    return notifications.getNotifications(response => {\n      console.log(\"CHLENIX getNotifications: \" + JSON.stringify(response));\n      commit(\"SET_NOTIFICATIONS\", response);\n    });\n  },\n  async getCountOfUnreadNotifications({\n    commit\n  }) {\n    return notifications.getNotificationsCount(response => {\n      commit(\"SET_UNREAD_NOTIFICATIONS\", parseInt(response));\n    });\n  },\n  async getNotificationsByAccount({\n    commit\n  }, account) {\n    return notifications.getNotificationsByAccount(account, response => {\n      commit(\"SET_NOTIFICATIONS\", response);\n    });\n  }\n};","map":{"version":3,"names":["notifications","state","unreadNotifications","mutations","SET_NOTIFICATIONS","SET_UNREAD_NOTIFICATIONS","actions","deleteNotification","dispatch","notificationId","deleteNotificationFromState","commit","i","id","filter","item","undefined","console","log","markAsRead","notificationIds","setReadNotifications","getNotifications","response","JSON","stringify","getCountOfUnreadNotifications","getNotificationsCount","parseInt","getNotificationsByAccount","account"],"sources":["D:/github-deadbeat/wmn-calendar.itserve.es/src/store/modules/Notifications.js"],"sourcesContent":["import notifications from \"@/plugins/api/factories/Notifications\";\r\n\r\nexport const state = {\r\n  notifications: [],\r\n  unreadNotifications: 0,\r\n};\r\n\r\nexport const mutations = {\r\n  SET_NOTIFICATIONS(state, notifications) {\r\n    state.notifications = notifications;\r\n  },\r\n  SET_UNREAD_NOTIFICATIONS(state, notifications) {\r\n    state.unreadNotifications = notifications;\r\n  },\r\n};\r\n\r\nexport const actions = {\r\n  async deleteNotification({ dispatch }, notificationId) {\r\n    await notifications.deleteNotification(notificationId);\r\n    dispatch(\"deleteNotificationFromState\", notificationId);\r\n  },\r\n  async deleteNotificationFromState({ state, commit }, notificationId) {\r\n    let notifications = state.notifications;\r\n    state.notifications = [];\r\n\r\n    for (let i in notifications) {\r\n      if (notifications[i].id === notificationId) {\r\n        delete notifications[i];\r\n        await commit(\r\n          \"SET_NOTIFICATIONS\",\r\n          notifications.filter(function (item) {\r\n            return item !== undefined;\r\n          })\r\n        );\r\n        console.log(state.notifications);\r\n      }\r\n    }\r\n  },\r\n  async markAsRead({ commit }, notificationIds) {\r\n    return notifications.setReadNotifications(notificationIds, () => {\r\n      commit(\"SET_UNREAD_NOTIFICATIONS\", 0);\r\n    });\r\n  },\r\n  async getNotifications({ commit }) {\r\n    return notifications.getNotifications((response) => {\r\n      console.log(\"CHLENIX getNotifications: \" + JSON.stringify(response));\r\n      commit(\"SET_NOTIFICATIONS\", response);\r\n    });\r\n  },\r\n  async getCountOfUnreadNotifications({ commit }) {\r\n    return notifications.getNotificationsCount((response) => {\r\n      commit(\"SET_UNREAD_NOTIFICATIONS\", parseInt(response));\r\n    });\r\n  },\r\n  async getNotificationsByAccount({ commit }, account) {\r\n    return notifications.getNotificationsByAccount(account, (response) => {\r\n      commit(\"SET_NOTIFICATIONS\", response);\r\n    });\r\n  },\r\n};\r\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,uCAAuC;AAEjE,OAAO,IAAMC,KAAK,GAAG;EACnBD,aAAa,EAAE,EAAE;EACjBE,mBAAmB,EAAE;AACvB,CAAC;AAED,OAAO,IAAMC,SAAS,GAAG;EACvBC,iBAAiBA,CAACH,KAAK,EAAED,aAAa,EAAE;IACtCC,KAAK,CAACD,aAAa,GAAGA,aAAa;EACrC,CAAC;EACDK,wBAAwBA,CAACJ,KAAK,EAAED,aAAa,EAAE;IAC7CC,KAAK,CAACC,mBAAmB,GAAGF,aAAa;EAC3C;AACF,CAAC;AAED,OAAO,IAAMM,OAAO,GAAG;EACrB,MAAMC,kBAAkBA,CAAC;IAAEC;EAAS,CAAC,EAAEC,cAAc,EAAE;IACrD,MAAMT,aAAa,CAACO,kBAAkB,CAACE,cAAc,CAAC;IACtDD,QAAQ,CAAC,6BAA6B,EAAEC,cAAc,CAAC;EACzD,CAAC;EACD,MAAMC,2BAA2BA,CAAC;IAAET,KAAK;IAAEU;EAAO,CAAC,EAAEF,cAAc,EAAE;IACnE,IAAIT,aAAa,GAAGC,KAAK,CAACD,aAAa;IACvCC,KAAK,CAACD,aAAa,GAAG,EAAE;IAExB,KAAK,IAAIY,CAAC,IAAIZ,aAAa,EAAE;MAC3B,IAAIA,aAAa,CAACY,CAAC,CAAC,CAACC,EAAE,KAAKJ,cAAc,EAAE;QAC1C,OAAOT,aAAa,CAACY,CAAC,CAAC;QACvB,MAAMD,MAAM,CACV,mBAAmB,EACnBX,aAAa,CAACc,MAAM,CAAC,UAAUC,IAAI,EAAE;UACnC,OAAOA,IAAI,KAAKC,SAAS;QAC3B,CAAC,CACH,CAAC;QACDC,OAAO,CAACC,GAAG,CAACjB,KAAK,CAACD,aAAa,CAAC;MAClC;IACF;EACF,CAAC;EACD,MAAMmB,UAAUA,CAAC;IAAER;EAAO,CAAC,EAAES,eAAe,EAAE;IAC5C,OAAOpB,aAAa,CAACqB,oBAAoB,CAACD,eAAe,EAAE,MAAM;MAC/DT,MAAM,CAAC,0BAA0B,EAAE,CAAC,CAAC;IACvC,CAAC,CAAC;EACJ,CAAC;EACD,MAAMW,gBAAgBA,CAAC;IAAEX;EAAO,CAAC,EAAE;IACjC,OAAOX,aAAa,CAACsB,gBAAgB,CAAEC,QAAQ,IAAK;MAClDN,OAAO,CAACC,GAAG,CAAC,4BAA4B,GAAGM,IAAI,CAACC,SAAS,CAACF,QAAQ,CAAC,CAAC;MACpEZ,MAAM,CAAC,mBAAmB,EAAEY,QAAQ,CAAC;IACvC,CAAC,CAAC;EACJ,CAAC;EACD,MAAMG,6BAA6BA,CAAC;IAAEf;EAAO,CAAC,EAAE;IAC9C,OAAOX,aAAa,CAAC2B,qBAAqB,CAAEJ,QAAQ,IAAK;MACvDZ,MAAM,CAAC,0BAA0B,EAAEiB,QAAQ,CAACL,QAAQ,CAAC,CAAC;IACxD,CAAC,CAAC;EACJ,CAAC;EACD,MAAMM,yBAAyBA,CAAC;IAAElB;EAAO,CAAC,EAAEmB,OAAO,EAAE;IACnD,OAAO9B,aAAa,CAAC6B,yBAAyB,CAACC,OAAO,EAAGP,QAAQ,IAAK;MACpEZ,MAAM,CAAC,mBAAmB,EAAEY,QAAQ,CAAC;IACvC,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}