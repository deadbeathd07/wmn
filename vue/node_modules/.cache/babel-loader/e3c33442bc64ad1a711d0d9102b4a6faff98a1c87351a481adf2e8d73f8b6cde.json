{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nimport appBridge from '@/mixins/app-bridge';\nimport { computed, ref, watch } from 'vue';\nimport { onMounted } from 'vue';\nimport { useStore } from 'vuex';\nexport default {\n  __name: 'ThemeSwitch',\n  setup(__props) {\n    var store = useStore();\n    var checked = ref(false);\n    var theme = ref(store.state.Auth.theme);\n    onMounted(() => {\n      if (theme.value === 'dark') {\n        checked.value = true;\n      }\n    });\n    function changeTheme() {\n      if (checked.value) {\n        store.dispatch('Auth/putTheme', 'dark');\n        // appBridge.methods.nativeSendEvent('setThemeMode', 'dark');\n      } else {\n        store.dispatch('Auth/putTheme', 'light');\n        // appBridge.methods.nativeSendEvent('setThemeMode', 'light');\n      }\n    }\n\n    return (_ctx, _cache) => {\n      var _component_van_switch = _resolveComponent(\"van-switch\");\n      var _component_van_cell = _resolveComponent(\"van-cell\");\n      return _openBlock(), _createBlock(_component_van_cell, {\n        center: \"\",\n        title: checked.value ? _ctx.$t('settings.theme.dark') : _ctx.$t('settings.theme.light')\n      }, {\n        \"right-icon\": _withCtx(() => [_createVNode(_component_van_switch, {\n          modelValue: checked.value,\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => checked.value = $event),\n          onChange: changeTheme\n        }, null, 8, [\"modelValue\"])]),\n        _: 1\n      }, 8, [\"title\"]);\n    };\n  }\n};","map":{"version":3,"names":["appBridge","computed","ref","watch","onMounted","useStore","store","checked","theme","state","Auth","value","changeTheme","dispatch"],"sources":["D:/working/wmn-calendar.itserve.es/src/components/specific/ThemeSwitch.vue"],"sourcesContent":["<template>\r\n\t<van-cell\r\n\t\tcenter\r\n\t\t:title=\"checked ? $t('settings.theme.dark') : $t('settings.theme.light')\"\r\n\t>\r\n\t\t<template #right-icon>\r\n\t\t\t<van-switch v-model=\"checked\" @change=\"changeTheme\" />\r\n\t\t</template>\r\n\t</van-cell>\r\n</template>\r\n\r\n<script setup>\r\nimport appBridge from '@/mixins/app-bridge';\r\nimport { computed, ref, watch } from 'vue';\r\nimport { onMounted } from 'vue';\r\nimport { useStore } from 'vuex';\r\n\r\nconst store = useStore();\r\n\r\nconst checked = ref(false);\r\n\r\nconst theme = ref(store.state.Auth.theme);\r\n\r\nonMounted(() => {\r\n\tif (theme.value === 'dark') {\r\n\t\tchecked.value = true;\r\n\t}\r\n});\r\n\r\nfunction changeTheme() {\r\n\tif (checked.value) {\r\n\t\tstore.dispatch('Auth/putTheme', 'dark');\r\n\t\t// appBridge.methods.nativeSendEvent('setThemeMode', 'dark');\r\n\t} else {\r\n\t\tstore.dispatch('Auth/putTheme', 'light');\r\n\t\t// appBridge.methods.nativeSendEvent('setThemeMode', 'light');\r\n\t}\r\n}\r\n</script>\r\n\r\n<style scoped></style>\r\n"],"mappings":";AAYA,OAAOA,SAAS,MAAM,qBAAqB;AAC3C,SAASC,QAAQ,EAAEC,GAAG,EAAEC,KAAK,QAAQ,KAAK;AAC1C,SAASC,SAAS,QAAQ,KAAK;AAC/B,SAASC,QAAQ,QAAQ,MAAM;;;;IAE/B,IAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;IAExB,IAAME,OAAO,GAAGL,GAAG,CAAC,KAAK,CAAC;IAE1B,IAAMM,KAAK,GAAGN,GAAG,CAACI,KAAK,CAACG,KAAK,CAACC,IAAI,CAACF,KAAK,CAAC;IAEzCJ,SAAS,CAAC,MAAM;MACf,IAAII,KAAK,CAACG,KAAK,KAAK,MAAM,EAAE;QAC3BJ,OAAO,CAACI,KAAK,GAAG,IAAI;MACrB;IACD,CAAC,CAAC;IAEF,SAASC,WAAWA,CAAA,EAAG;MACtB,IAAIL,OAAO,CAACI,KAAK,EAAE;QAClBL,KAAK,CAACO,QAAQ,CAAC,eAAe,EAAE,MAAM,CAAC;QACvC;MACD,CAAC,MAAM;QACNP,KAAK,CAACO,QAAQ,CAAC,eAAe,EAAE,OAAO,CAAC;QACxC;MACD;IACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}