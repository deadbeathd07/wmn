import type { PropType } from 'vue';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            autostart: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            autostart: {
                type: BooleanConstructor;
                default: boolean;
            };
            options: {
                type: PropType<import("fireworks-js/dist/types.js").RecursivePartial<import("fireworks-js").FireworksTypes.Options>>;
                required: false;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "autostart">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            autostart: {
                type: BooleanConstructor;
                default: boolean;
            };
            options: {
                type: PropType<import("fireworks-js/dist/types.js").RecursivePartial<import("fireworks-js").FireworksTypes.Options>>;
                required: false;
            };
        }>>, {
            waitStop(): Promise<void>;
            stop(): void;
            isRunning: boolean;
            start: () => void;
            launch: (count?: number | undefined) => void;
            pause: () => void;
            clear: () => void;
            updateOptions: (options: import("fireworks-js/dist/types.js").RecursivePartial<import("fireworks-js").FireworksTypes.Options>) => void;
            updateBoundaries: (boundaries: Partial<import("fireworks-js").FireworksTypes.Boundaries>) => void;
            updateSize: ({ width, height }?: Partial<import("fireworks-js").FireworksTypes.Sizes> | undefined) => void;
            currentOptions: import("fireworks-js/dist/options.js").Options;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            autostart: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        autostart: {
            type: BooleanConstructor;
            default: boolean;
        };
        options: {
            type: PropType<import("fireworks-js/dist/types.js").RecursivePartial<import("fireworks-js").FireworksTypes.Options>>;
            required: false;
        };
    }>> & import("vue").ShallowUnwrapRef<{
        waitStop(): Promise<void>;
        stop(): void;
        isRunning: boolean;
        start: () => void;
        launch: (count?: number | undefined) => void;
        pause: () => void;
        clear: () => void;
        updateOptions: (options: import("fireworks-js/dist/types.js").RecursivePartial<import("fireworks-js").FireworksTypes.Options>) => void;
        updateBoundaries: (boundaries: Partial<import("fireworks-js").FireworksTypes.Boundaries>) => void;
        updateSize: ({ width, height }?: Partial<import("fireworks-js").FireworksTypes.Sizes> | undefined) => void;
        currentOptions: import("fireworks-js/dist/options.js").Options;
    }> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autostart: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: PropType<import("fireworks-js/dist/types.js").RecursivePartial<import("fireworks-js").FireworksTypes.Options>>;
        required: false;
    };
}>>, {
    waitStop(): Promise<void>;
    stop(): void;
    isRunning: boolean;
    start: () => void;
    launch: (count?: number | undefined) => void;
    pause: () => void;
    clear: () => void;
    updateOptions: (options: import("fireworks-js/dist/types.js").RecursivePartial<import("fireworks-js").FireworksTypes.Options>) => void;
    updateBoundaries: (boundaries: Partial<import("fireworks-js").FireworksTypes.Boundaries>) => void;
    updateSize: ({ width, height }?: Partial<import("fireworks-js").FireworksTypes.Sizes> | undefined) => void;
    currentOptions: import("fireworks-js/dist/options.js").Options;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    autostart: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
export default _default;
